/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/Documents/{documentNumber}/Amendments": {
    get: operations["Amendments_GetAmendmentsAll"];
  };
  "/GeneralCourts/{generalCourtNumber}/Documents/{documentNumber}/Amendments": {
    get: operations["Amendments_GetAmendments"];
  };
  "/GeneralCourts/{generalCourtNumber}/Documents/{documentNumber}/Branches/{branch}/Amendments": {
    get: operations["Amendments_GetAmendments2"];
  };
  "/GeneralCourts/{generalCourtNumber}/Documents/{documentNumber}/Branches/{branch}/Amendments/{amendmentNumber}": {
    get: operations["Amendments_GetAmendment"];
  };
  "/GeneralCourts/{generalCourtNumber}/Documents/{documentNumber}/Branches/{branch}/Category/{category}/Amendments": {
    get: operations["Amendments_GetAmendments3"];
  };
  "/Committees": {
    get: operations["Committees_GetCommitteesAll"];
  };
  "/Committees/{committeeCode}": {
    get: operations["Committees_GetCommittees2"];
  };
  "/GeneralCourts/{generalCourtNumber}/Committees": {
    get: operations["Committees_GetCommittees"];
  };
  "/GeneralCourts/{generalCourtNumber}/Committees/{committeeCode}": {
    get: operations["Committees_GetCommittees3"];
  };
  "/GeneralCourts/{generalCourtNumber}/Committees/CommitteeVotes": {
    get: operations["Committees_GetCommitteeCodes"];
  };
  "/Committees/{committeeCode}/Documents/{documentNumber}/CommitteeVotes": {
    get: operations["CommitteeVotes_GetCommitteeVotes"];
  };
  "/GeneralCourts/{generalCourtNumber}/Committees/{committeeCode}/Documents/{documentNumber}/CommitteeVotes": {
    get: operations["CommitteeVotes_GetCommitteeVotesByDocument"];
  };
  "/Documents/{documentNumber}/DocumentHistoryActions": {
    get: operations["DocumentHistoryActions_GetDocumentHistoryAll"];
  };
  "/GeneralCourts/{generalCourtNumber}/Documents/{documentNumber}/DocumentHistoryActions": {
    get: operations["DocumentHistoryActions_GetDocumentHistory"];
  };
  "/Cities/{city}/Documents": {
    get: operations["Documents_GetDocumentByCityAll"];
  };
  "/Documents": {
    get: operations["Documents_GetDocumentsAll"];
  };
  "/Documents/{documentNumber}": {
    get: operations["Documents_GetDocument"];
  };
  "/Documents/{documentNumber}/Similar": {
    get: operations["Documents_GetSimilarDocumentsAll"];
  };
  "/Documents/SupportedCities": {
    get: operations["Documents_GetCitiesAll"];
  };
  "/GeneralCourts/{generalCourtNumber}/Cities/{city}/Documents": {
    get: operations["Documents_GetDocumentByCity"];
  };
  "/GeneralCourts/{generalCourtNumber}/Documents": {
    get: operations["Documents_GetDocuments"];
  };
  "/GeneralCourts/{generalCourtNumber}/Documents/{documentNumber}": {
    get: operations["Documents_GetDocument2"];
  };
  "/GeneralCourts/{generalCourtNumber}/Documents/{documentNumber}/Similar": {
    get: operations["Documents_GetSimilarDocuments"];
  };
  "/GeneralCourts/{generalCourtNumber}/Documents/SupportedCities": {
    get: operations["Documents_GetCities"];
  };
  "/GeneralCourts": {
    get: operations["GeneralCourts_GetGeneralCourt"];
  };
  "/GeneralCourts/{generalCourtNumber}": {
    get: operations["GeneralCourts_GetGeneralCourt2"];
  };
  "/GeneralCourts/Committees": {
    get: operations["GeneralCourts_GetGeneralCourtsForCommittees"];
  };
  "/GeneralCourts/Documents": {
    get: operations["GeneralCourts_GetGeneralCourtsForDocuments"];
  };
  "/GeneralCourts/LegislativeMembers": {
    get: operations["GeneralCourts_GetGeneralCourtsForLegislativeMembers"];
  };
  "/GeneralCourts/Sessions": {
    get: operations["GeneralCourts_GetGeneralCourtsForSessions"];
  };
  "/Chapters": {
    get: operations["GeneralLawChapters_GetChapters"];
  };
  "/Chapters/{code}": {
    get: operations["GeneralLawChapters_GetChaptersByCode"];
  };
  "/Parts/{partCode}/Chapters": {
    get: operations["GeneralLawChapters_GetChaptersByPart"];
  };
  "/Parts": {
    get: operations["GeneralLawParts_GetGeneralLawsParts"];
  };
  "/Parts/{code}": {
    get: operations["GeneralLawParts_GetGeneralLawsParts2"];
  };
  "/Chapters/{chapter}/Sections": {
    get: operations["GeneralLawSections_GetGeneralLawsSectionsAll"];
  };
  "/Chapters/{chapter}/Sections/{section}": {
    get: operations["GeneralLawSections_GetGeneralLawsSections"];
  };
  "/Hearings": {
    get: operations["Hearings_GetHearingsAll"];
  };
  "/Hearings/{eventId}": {
    get: operations["Hearings_GetHearings"];
  };
  "/GeneralCourts/{generalCourtNumber}/HouseJournals": {
    get: operations["HouseJournals_GetHouseJournals"];
  };
  "/HouseJournals": {
    get: operations["HouseJournals_GetHouseJournalsAll"];
  };
  "/HouseJournals/{sessionDate}/{isJoint}": {
    get: operations["HouseJournals_GetHouseJournals2"];
  };
  "/Branches/{branch}/Leadership": {
    get: operations["Leadership_GetLeadershipAll"];
  };
  "/GeneralCourts/{generalCourtNumber}/Branches/{branch}/Leadership": {
    get: operations["Leadership_GetLeadership"];
  };
  "/GeneralCourts/{generalCourtNumber}/LegislativeMembers": {
    get: operations["LegislativeMembers_GetLegislativeMembers"];
  };
  "/GeneralCourts/{generalCourtNumber}/LegislativeMembers/{memberCode}": {
    get: operations["LegislativeMembers_GetLegislativeMembers3"];
  };
  "/LegislativeMembers": {
    get: operations["LegislativeMembers_GetLegislativeMembersAll"];
  };
  "/LegislativeMembers/{memberCode}": {
    get: operations["LegislativeMembers_GetLegislativeMembers2"];
  };
  "/Branches/{branch}/Reports": {
    get: operations["Reports_GetReports"];
  };
  "/Reports": {
    get: operations["Reports_GetReportsAll"];
  };
  "/Documents/{documentNumber}/RollCalls": {
    get: operations["RollCalls_GetRollCallAll"];
  };
  "/GeneralCourts/{generalCourtNumber}/Branches/{branch}/RollCalls/{rollCallNumber}": {
    get: operations["RollCalls_GetRollCall2"];
  };
  "/GeneralCourts/{generalCourtNumber}/Documents/{documentNumber}/RollCalls": {
    get: operations["RollCalls_GetRollCall"];
  };
  "/GeneralCourts/{generalCourtNumber}/SenateJournals": {
    get: operations["SenateJournals_GetSenateJournals"];
  };
  "/SenateJournals": {
    get: operations["SenateJournals_GetSenateJournalsAll"];
  };
  "/SenateJournals/{sessionDate}/{isJoint}": {
    get: operations["SenateJournals_GetSenateJournals2"];
  };
  "/SessionLaws": {
    get: operations["SessionLaws_GetSessionLaws"];
  };
  "/SessionLaws/{year}": {
    get: operations["SessionLaws_GetSessionLaws2"];
  };
  "/SessionLaws/{year}/{chapterNumber}": {
    get: operations["SessionLaws_GetSessionLaws3"];
  };
  "/SessionLaws/SupportedYears": {
    get: operations["SessionLaws_GetSessionLawsYears"];
  };
  "/GeneralCourts/{generalCourtNumber}/Sessions": {
    get: operations["Sessions_GetSessionsByGeneralCourt"];
  };
  "/Sessions": {
    get: operations["Sessions_GetSessionsAll"];
  };
  "/Sessions/{eventId}": {
    get: operations["Sessions_GetSessions"];
  };
  "/SpecialEvents": {
    get: operations["SpecialEvents_GetSpecialEventsAll"];
  };
  "/SpecialEvents/{eventId}": {
    get: operations["SpecialEvents_GetSpecialEvents"];
  };
}

export interface definitions {
  /** @description Data Model for event agenda items returned in single API calls */
  AgendaItem: {
    /** @description Topic of the agenda item */
    topic?: string;
    /**
     * Format: date-time
     * @description Start time of the agenda item
     */
    startTime?: string;
    /**
     * Format: date-time
     * @description End time of the agenda item
     */
    endTime?: string;
    /** @description List of all Documents being discussed in this agenda item */
    documentsInAgenda?: definitions["DocumentSummary"][];
  };
  /** @description Data model for Bill Amendments */
  Amendment: definitions["DtoBase"] & {
    /** @description The Amendment number of the Amendment. */
    amendmentNumber?: string;
    /** @description The Bill Number that the Amendment is for. */
    parentBillNumber?: string;
    /** @description The link to the Amendment Document page if it exists. */
    bill?: definitions["DocumentSummary"];
    /** @description The sponsor of the Amendment. */
    sponsor?: definitions["BillSponsorSummary"];
    /** @description The Category of the Amendment. */
    category?: string;
    /** @description The Action of the Amendment. */
    action?: string;
    /** @description The Roll Call taken of the Amendment. */
    rollCall?: definitions["RollCallSummary"][];
    /** @description The title of the Amendment. */
    title?: string;
    /** @description The branch of the Amendment. */
    branch?: string;
    /**
     * Format: int32
     * @description The Redraft count of the Amendment.
     */
    redraftCount?: number;
    /** @description Whether the amendment is a Further Amendment. */
    isFurther: boolean;
    /**
     * Format: int32
     * @description The General Court Number of the Amendment.
     */
    generalCourtNumber: number;
    /** @description The text of the Amendment. */
    text?: string;
  };
  /** @description The data model for a limited Amendment */
  AmendmentSummary: {
    /** @description The Amendment Number of the Amendment. */
    amendmentNumber?: string;
    /** @description The Bill Number of the Bill that is being Amended. */
    parentBillNumber?: string;
    /** @description The Branch doing the amending. */
    branch?: string;
    /**
     * Format: int32
     * @description The General Court Number of the Bill being Amended.
     */
    generalCourtNumber: number;
    /** @description A link to the detailed model of an Amendment. */
    details?: string;
  };
  /** @description The data model for Attachments returned with Bill Documents */
  Attachment: {
    /** @description The description of the Attachment. */
    description?: string;
    /** @description The download link of the Attachment */
    downloadUrl?: string;
  };
  /** @description Data Model for Bill Sponsors returned in batch API calls */
  BillSponsorSummary: {
    /** @description Identifier of the bill sponsor */
    id?: string;
    /** @description Name of the Bill Sponsor */
    name?: string;
    /**
     * @description Type of the Bill Sponsor
     * 1 = Legislative Member, 2 = Committee, 3 = Public Request, 4 = Special Request
     */
    type: definitions["SponsorTypeEnum"];
    /**
     * @description Link for the API to get the details for this entry
     * Only Committees and Legislative Members will have further details that can be obtained in this way
     */
    details?: string;
  };
  /** @description Data Model for Committees returned in single API calls */
  Committee: definitions["DtoBase"] & {
    /** @description Code of the Committee */
    committeeCode?: string;
    /** @description Full Name of the Committee */
    fullName?: string;
    /** @description Short Name of the Committee */
    shortName?: string;
    /** @description Description of the Committee */
    description?: string;
    /** @description Branch of the Committee */
    branch?: string;
    /**
     * Format: int32
     * @description General Court for this Committee
     */
    generalCourtNumber: number;
    /** @description Senate Chairperson for this Committee */
    senateChairperson?: definitions["LegislativeMemberSummary"];
    /** @description House Chairperson for the Committee */
    houseChairperson?: definitions["LegislativeMemberSummary"];
    /** @description List of all Documents currently before this committee */
    documentsBeforeCommittee?: definitions["DocumentSummary"][];
    /** @description List of all Documents Reported Out from this committee */
    reportedOutDocuments?: definitions["DocumentSummary"][];
    /** @description List of all Documents Reported Out from this committee */
    hearings?: definitions["HearingSummary"][];
  };
  /** @description The data model for Commitee Recommendations returned in Bill Documents. */
  CommitteeRecommendation: definitions["DtoBase"] & {
    /** @description The action recommended by the Committee. */
    action?: string;
    /** @description The Fiscal Amounts decided by the Committee. */
    fiscalAmounts?: definitions["FiscalAmount"][];
    /** @description The Committee making the recommendation. */
    committee?: definitions["CommitteeSummary"];
    /** @description A list of votes by the Committee. */
    votes?: definitions["CommitteeVote"][];
  };
  /** @description Data Model for Committees returned in batch API calls */
  CommitteeSummary: {
    /** @description Code of the Committee */
    committeeCode?: string;
    /**
     * Format: int32
     * @description General Court for this Committee
     */
    generalCourtNumber: number;
    /** @description Link for the API to get the details for this Committee */
    details?: string;
  };
  /** @description Data Model for Committee Votes */
  CommitteeVote: definitions["DtoBase"] & {
    /** @description The Question Text of the Committee Vote */
    question?: string;
    /** @description The Bill the Vote is on. */
    bill?: definitions["DocumentSummary"];
    /** @description The Committee of the vote. */
    committee?: definitions["CommitteeSummary"];
    /**
     * Format: date-time
     * @description The time the vote was taken.
     */
    date: string;
    /** @description The vote record. */
    vote?: definitions["CommitteeVoteRecord"][];
  };
  /** @description The data model for recorded Committee Votes */
  CommitteeVoteRecord: definitions["DtoBase"] & {
    /** @description A list of members who voted Favorable. */
    favorable?: definitions["LegislativeMemberSummary"][];
    /** @description A list of members who voted Adverse. */
    adverse?: definitions["LegislativeMemberSummary"][];
    /** @description A list of members who voted ReserveRight. */
    reserveRight?: definitions["LegislativeMemberSummary"][];
    /** @description A list of members who have No Vote Recorded. */
    noVoteRecorded?: definitions["LegislativeMemberSummary"][];
  };
  /** @description Data Model for documents returned in single API calls */
  Document: definitions["DtoBase"] & {
    /** @description Title of the Document. */
    title?: string;
    /** @description Bill Number of the Document. */
    billNumber?: string;
    /** @description Docket Number of the Document. */
    docketNumber?: string;
    /**
     * Format: int32
     * @description General Court for this Document.
     */
    generalCourtNumber: number;
    /** @description The primary sponsor of this Document. */
    primarySponsor?: definitions["BillSponsorSummary"];
    /** @description List of all Legislators copsonsoring this Document. */
    cosponsors?: definitions["BillSponsorSummary"][];
    /** @description Link to the Bill History for this Document. */
    billHistory?: string;
    /** @description Display name for the legislation type of this Document. */
    legislationTypeName?: string;
    /** @description The Pinslip text of the Document. */
    pinslip?: string;
    /** @description The text of the Document. */
    documentText?: string;
    /** @description The Emergency Preamble of the Document. */
    emergencyPreamble?: string;
    /** @description A list of Roll Calls made on this bill. */
    rollCalls?: definitions["RollCallSummary"][];
    /** @description A list of links to download Document Attachments. */
    attachments?: definitions["Attachment"][];
    /** @description A list of Committee Recommendations made on the bill. */
    committeeRecommendations?: definitions["CommitteeRecommendation"][];
    /** @description A list of Amendments to the bill. */
    amendments?: definitions["AmendmentSummary"][];
  };
  /** @description Data Model for actions taken in the Document's History */
  DocumentHistoryAction: definitions["DtoBase"] & {
    /**
     * Format: date-time
     * @description Date of the Document action
     */
    date: string;
    /** @description Branch that took action on the Document */
    branch?: string;
    /** @description Details of the action taken on the document */
    action?: string;
  };
  /** @description Data Model for documents returned in batch API calls */
  DocumentSummary: {
    /** @description Bill Number of the Bill */
    billNumber?: string;
    /** @description Docket Number of the Bill */
    docketNumber?: string;
    /** @description Title of the Document */
    title?: string;
    /** @description The primary sponsor of this Document */
    primarySponsor?: definitions["BillSponsorSummary"];
    /**
     * Format: int32
     * @description General Court for this document
     */
    generalCourtNumber: number;
    /** @description Link for the API to get the details for this entry */
    details?: string;
    /** @description Details are not available on dockets which are only visible on the Clerk's Docket Book */
    isDocketBookOnly: boolean;
  };
  /** @description Interface for all Models to share */
  DtoBase: { [key: string]: unknown };
  /** @description Data Model for events returned in single API calls */
  Event: definitions["DtoBase"] & {
    /**
     * Format: int32
     * @description ID of the Special Event, Hearing, or Session
     */
    eventId: number;
    /** @description Name of the event. In the case of hearings, the name is the name of the hosting Committee or Commission */
    name?: string;
    /** @description Status of the event */
    status?: string;
    /**
     * Format: date-time
     * @description Date of the event
     */
    eventDate?: string;
    /**
     * Format: date-time
     * @description Start time of the event
     */
    startTime?: string;
    /** @description Description of the event */
    description?: string;
  };
  Exception: {
    message?: string;
    innerException?: definitions["Exception"];
    stackTrace?: string;
    source?: string;
  };
  /** @description Data Model for fiscal amounts of a committee recommendation */
  FiscalAmount: {
    /** @description Type of the fiscal amount */
    fiscalType?: string;
    /** @description Amount of the fiscal amount */
    amount?: string;
  };
  /** @description Data model for General Courts returned in API calls */
  GeneralCourt: definitions["DtoBase"] & {
    /** @description Name of the General Court */
    name?: string;
    /**
     * Format: int32
     * @description Number of the General Court
     */
    number: number;
    /**
     * Format: int32
     * @description The first year of the General Court
     */
    firstYear: number;
    /**
     * Format: int32
     * @description The second year of the General Court (if applicable)
     */
    secondYear: number;
  };
  /** @description Data Model for Chapters returned in single API calls */
  GeneralLawChapter: definitions["DtoBase"] & {
    /** @description The Code of the General Law Chapter */
    code?: string;
    /** @description The Name of the General Law Chapter */
    name?: string;
    /** @description If the Chapter is repealed or not */
    isRepealed: boolean;
    /** @description The stricken text if the chapter is repealed */
    strickenText?: string;
    /** @description A link to the Part that the contains the chapter */
    part?: definitions["GeneralLawPartSummary"];
    /** @description A list of the sections contained by the chapter */
    sections?: definitions["GeneralLawSectionSummary"][];
  };
  /** @description Data Model for Chapters returned in batch API calls */
  GeneralLawChapterSummary: {
    /** @description The Code of the General Law Chapter */
    code?: string;
    /** @description Link to the API call for the detailed information of this Chapter */
    details?: string;
  };
  /** @description Data Model for Parts returned in single API calls */
  GeneralLawPart: definitions["DtoBase"] & {
    /** @description The Code of the General Law Part */
    code?: string;
    /** @description The Name of the General Law Part */
    name?: string;
    /**
     * Format: int32
     * @description The First Chapter in the General Law Part
     */
    firstChapter: number;
    /**
     * Format: int32
     * @description The Last Chapter in the General Law Part
     */
    lastChapter: number;
    /** @description A list of links to the Chapters contained within the General Law Part */
    chapters?: definitions["GeneralLawChapterSummary"][];
  };
  /** @description Data Model for Parts returned in batch API calls */
  GeneralLawPartSummary: {
    /** @description The Code of the General Law Part */
    code?: string;
    /** @description A link to the detailed information about this General Law Part */
    details?: string;
  };
  /** @description Data Model for Sections returned in single API calls */
  GeneralLawSection: definitions["DtoBase"] & {
    /** @description The code of the General Law Section */
    code?: string;
    /** @description The name of the General Law Section */
    name?: string;
    /** @description If the General Law Section has been repealed */
    isRepealed: boolean;
    /** @description The text of the General Law Section */
    text?: string;
    /** @description A link to the Chapter that the section is under */
    chapter?: definitions["GeneralLawChapterSummary"];
    /** @description A link to the Part that the section is under */
    part?: definitions["GeneralLawPartSummary"];
  };
  /** @description Data Model for Sections returned in batch API calls */
  GeneralLawSectionSummary: {
    /** @description The code of the General Law Section */
    code?: string;
    /** @description The code of the chapter of the General Law Section */
    chapterCode?: string;
    /** @description A link to the detailed information about this General Law Section */
    details?: string;
  };
  /** @description Data Model for hearings returned in single API calls */
  Hearing: definitions["Event"] & {
    /** @description Committee or Commission hosting the hearing */
    hearingHost?: definitions["CommitteeSummary"];
    /** @description List of all topics being discussed in this hearing */
    hearingAgendas?: definitions["AgendaItem"][];
    /** @description If this hearing was rescheduled, this is the previous schedule that has been replaced */
    rescheduledHearing?: definitions["HearingRescheduled"];
    /** @description Location of the hearing */
    location?: definitions["Location"];
  };
  /** @description Data Model for the past schedule associated with a rescheduled hearing */
  HearingRescheduled: {
    /** @description Former status of the hearing */
    status?: string;
    /**
     * Format: date-time
     * @description Former date of the hearing
     */
    eventDate?: string;
    /**
     * Format: date-time
     * @description Former start time of the hearing
     */
    startTime?: string;
    /** @description Former location of the hearing */
    location?: definitions["Location"];
  };
  /** @description Data Model for hearings returned in batch API calls */
  HearingSummary: {
    /**
     * Format: int32
     * @description ID of the Hearing
     */
    eventId: number;
    /** @description Link to the API call for the detailed information of this hearing */
    details?: string;
  };
  /** @description Data Model for House Journals returned in single API calls */
  HouseJournal: definitions["DtoBase"] & {
    /** @description The Journal Number of the Journal */
    journalSessionDate?: string;
    /**
     * Format: int32
     * @description The General Court Number of the Journal
     */
    generalCourtNumber: number;
    /** @description Whether the journal is from a joint session */
    isJoint: boolean;
    /** @description A link to the PDF of the Journal */
    downloadUrl?: string;
    /**
     * Format: date-time
     * @description The date the Session Ended, used in transformations
     */
    sessionDate?: string;
    /** @description The Range of the Roll Calls */
    rollCallRange?: string;
  };
  HttpResponseException: definitions["Exception"] & {
    response?: unknown;
  };
  /** @description The Data Model for Journals returned in Batch Queries */
  JournalSummary: {
    /** @description The Numeric Date of the Session */
    journalSessionDate?: string;
    /** @description Whether the journal is from a joint session */
    isJoint: boolean;
    /** @description A link to the detailed information about this Senate Journal */
    details?: string;
  };
  /** @description Data Model for Leadership */
  Leadership: definitions["DtoBase"] & {
    /** @description A link to the details of the Legislative Member */
    member?: definitions["LegislativeMemberSummary"];
    /** @description The Leadership position of the member */
    position?: string;
  };
  /** @description Data Model for Legislative Member returned in single API calls */
  LegislativeMember: definitions["DtoBase"] & {
    /** @description Name of the legislative member */
    name?: string;
    /**
     * Format: int32
     * @description General Court for this legislative member
     */
    generalCourtNumber: number;
    /** @description Leadership position of the legislative member */
    leadershipPosition?: string;
    /** @description Branch that the legislative member works in */
    branch?: string;
    /** @description Member code of the legislative member */
    memberCode?: string;
    /** @description District of the legislative member */
    district?: string;
    /** @description Party of the legislative member */
    party?: string;
    /** @description Email address of the legislative member */
    emailAddress?: string;
    /** @description The room number of the legislative member */
    roomNumber?: string;
    /** @description The phone number of the legislative member */
    phoneNumber?: string;
    /** @description The fax number of the legislative member */
    faxNumber?: string;
    /** @description A list of bills that are sponsored by the legislative member */
    sponsoredBills?: definitions["DocumentSummary"][];
    /** @description A list of bills that are co-sponsored by the legislative member */
    coSponsoredBills?: definitions["DocumentSummary"][];
    /** @description A list of Committees the legislative member is of */
    committees?: definitions["CommitteeSummary"][];
  };
  /** @description Data Model for Legislative Members returned in batch API calls */
  LegislativeMemberSummary: {
    /**
     * Format: int32
     * @description General Court for this legislative member
     */
    generalCourtNumber: number;
    /** @description Member code of the legislative member */
    memberCode?: string;
    /** @description Link for the API to get the details for this entry */
    details?: string;
  };
  /** @description Data Model for locations */
  Location: {
    /** @description Name of the location */
    locationName?: string;
    /** @description Address Line 1 of the location */
    addressLine1?: string;
    /** @description Address Line 2 of the location */
    addressLine2?: string;
    /** @description City of the location */
    city?: string;
    /** @description State of the location */
    state?: string;
    /** @description Zip Code of the location */
    zipCode?: string;
  };
  /** @description The Data Model for Reports return in API Queries */
  Report: definitions["DtoBase"] & {
    /**
     * Format: date-time
     * @description The date the report was released.
     */
    date: string;
    /** @description The name of the report. */
    name?: string;
    /** @description Who the report was submitted by. */
    submittedBy?: string;
    /** @description The Url to download the report. */
    downloadUrl?: string;
  };
  /** @description Data Model for RollCalls returned in API calls */
  RollCall: definitions["DtoBase"] & {
    /**
     * Format: int32
     * @description The General Court Number of the Roll Call
     */
    generalCourtNumber: number;
    /** @description The Branch of the Roll Call */
    branch?: string;
    /** @description The Question Motion Text of the Roll Call */
    questionMotion?: string;
    /**
     * Format: int32
     * @description The Roll Call Number of the Roll Call
     */
    rollCallNumber: number;
    /** @description A list of legislative members who voted Yea */
    yeas?: definitions["LegislativeMemberSummary"][];
    /** @description A list of legislative members who voted Nay */
    nays?: definitions["LegislativeMemberSummary"][];
    /** @description A list of legislative members who were Absent */
    absent?: definitions["LegislativeMemberSummary"][];
    /** @description A link to download a PDF of the Roll Call */
    downloadUrl?: string;
  };
  /** @description The Data Model for a limited Roll Call used in Batch Queries */
  RollCallSummary: {
    /**
     * Format: int32
     * @description The General Court Number of the Roll Call
     */
    generalCourtNumber: number;
    /** @description The Branch of the Roll Call */
    branch?: string;
    /**
     * Format: int32
     * @description The Roll Call Number
     */
    rollCallNumber: number;
    /** @description Link for the API to get the details for this entry */
    details?: string;
  };
  /** @description Data Model for Senate Journals returned in single API calls. This is here to hide the fact that the journals inherit from the same base class */
  SenateJournal: definitions["DtoBase"] & {
    /** @description The Journal Number of the Journal */
    journalSessionDate?: string;
    /**
     * Format: int32
     * @description The General Court Number of the Journal
     */
    generalCourtNumber: number;
    /** @description Whether the journal is from a joint session */
    isJoint: boolean;
    /** @description A link to the PDF of the Journal */
    downloadUrl?: string;
    /**
     * Format: date-time
     * @description The date the Session Ended, used in transformations
     */
    sessionDate?: string;
  };
  /** @description Data Model for sessions returned in single API calls */
  Session: definitions["Event"] & {
    /** @description Name of the location for this Session */
    locationName?: string;
    /**
     * Format: int32
     * @description General Court for this Session
     */
    generalCourtNumber: number;
  };
  /** @description Data Model for Session Laws returned in API calls */
  SessionLaw: definitions["DtoBase"] & {
    /**
     * Format: int32
     * @description The year the Session Law is enacted for
     */
    year: number;
    /** @description The chapter number of the Session Law */
    chapterNumber?: string;
    /** @description The type of the Session Law */
    type?: string;
    /** @description The approval type of the Session Law */
    approvalType?: string;
    /** @description The title of the Session Law */
    title?: string;
    /** @description The status of the Session Law */
    status?: string;
    /** @description The approval date of the Session Law */
    approvedDate?: string;
    /** @description The text of the Session Law */
    chapterText?: string;
    /** @description The limited bill, used to create a link to the detailed bill */
    originBill?: definitions["DocumentSummary"];
  };
  /** @description Data Model for Special Events returned in single API calls */
  SpecialEvent: definitions["Event"] & {
    /** @description Location of the Special Event */
    location?: definitions["Location"];
  };
  /**
   * @description Type of the person or collective sponsoring the Document
   * 1 = Legislative Member, 2 = Committee, 3 = Public Request, 4 = Special Request
   * @enum {integer}
   */
  SponsorTypeEnum: 1 | 2 | 3 | 4;
}

export interface operations {
  Amendments_GetAmendmentsAll: {
    parameters: {
      path: {
        documentNumber: string;
      };
    };
    responses: {
      200: {
        schema: definitions["AmendmentSummary"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  Amendments_GetAmendments: {
    parameters: {
      path: {
        generalCourtNumber: number;
        documentNumber: string;
      };
    };
    responses: {
      200: {
        schema: definitions["AmendmentSummary"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  Amendments_GetAmendments2: {
    parameters: {
      path: {
        generalCourtNumber: number;
        branch: string;
        documentNumber: string;
      };
    };
    responses: {
      200: {
        schema: definitions["AmendmentSummary"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  Amendments_GetAmendment: {
    parameters: {
      path: {
        generalCourtNumber: number;
        branch: string;
        documentNumber: string;
        amendmentNumber: string;
      };
    };
    responses: {
      200: {
        schema: definitions["Amendment"];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  Amendments_GetAmendments3: {
    parameters: {
      path: {
        generalCourtNumber: number;
        branch: string;
        documentNumber: string;
        category: string;
      };
    };
    responses: {
      200: {
        schema: definitions["AmendmentSummary"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  Committees_GetCommitteesAll: {
    responses: {
      200: {
        schema: definitions["CommitteeSummary"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  Committees_GetCommittees2: {
    parameters: {
      path: {
        /** The Committee Code to filter by. */
        committeeCode: string;
      };
    };
    responses: {
      200: {
        schema: definitions["Committee"];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  Committees_GetCommittees: {
    parameters: {
      path: {
        /** The General Court to filter by. */
        generalCourtNumber: number;
      };
    };
    responses: {
      200: {
        schema: definitions["CommitteeSummary"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  Committees_GetCommittees3: {
    parameters: {
      path: {
        /** The Committee Code to filter by. */
        committeeCode: string;
        /** The General Court to filter by. */
        generalCourtNumber: number;
      };
    };
    responses: {
      200: {
        schema: definitions["Committee"];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  Committees_GetCommitteeCodes: {
    parameters: {
      path: {
        generalCourtNumber: number;
      };
    };
    responses: {
      200: {
        schema: string[];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  CommitteeVotes_GetCommitteeVotes: {
    parameters: {
      path: {
        committeeCode: string;
        documentNumber: string;
      };
    };
    responses: {
      200: {
        schema: definitions["CommitteeVote"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  CommitteeVotes_GetCommitteeVotesByDocument: {
    parameters: {
      path: {
        generalCourtNumber: number;
        committeeCode: string;
        documentNumber: string;
      };
    };
    responses: {
      200: {
        schema: definitions["CommitteeVote"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  DocumentHistoryActions_GetDocumentHistoryAll: {
    parameters: {
      path: {
        /** The Bill or Docket Number to filter by. */
        documentNumber: string;
      };
    };
    responses: {
      200: {
        schema: definitions["DocumentHistoryAction"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  DocumentHistoryActions_GetDocumentHistory: {
    parameters: {
      path: {
        /** The Bill or Docket Number to filter by. */
        documentNumber: string;
        /** The General Court to filter by. */
        generalCourtNumber: number;
      };
    };
    responses: {
      200: {
        schema: definitions["DocumentHistoryAction"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  Documents_GetDocumentByCityAll: {
    parameters: {
      path: {
        city: string;
      };
    };
    responses: {
      200: {
        schema: definitions["DocumentSummary"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  Documents_GetDocumentsAll: {
    responses: {
      200: {
        schema: definitions["DocumentSummary"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  Documents_GetDocument: {
    parameters: {
      path: {
        /** The Bill or Docket Number to filter by. */
        documentNumber: string;
      };
    };
    responses: {
      200: {
        schema: definitions["Document"];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  Documents_GetSimilarDocumentsAll: {
    parameters: {
      path: {
        /** The document number to filter by */
        documentNumber: string;
      };
    };
    responses: {
      200: {
        schema: definitions["DocumentSummary"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  Documents_GetCitiesAll: {
    responses: {
      200: {
        schema: string[];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  Documents_GetDocumentByCity: {
    parameters: {
      path: {
        city: string;
        generalCourtNumber: number;
      };
    };
    responses: {
      200: {
        schema: definitions["DocumentSummary"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  Documents_GetDocuments: {
    parameters: {
      path: {
        /** The General Court to filter by. */
        generalCourtNumber: number;
      };
    };
    responses: {
      200: {
        schema: definitions["DocumentSummary"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  Documents_GetDocument2: {
    parameters: {
      path: {
        /** The Bill or Docket Number to filter by. */
        documentNumber: string;
        /** The General Court to filter by. */
        generalCourtNumber: number;
      };
    };
    responses: {
      200: {
        schema: definitions["Document"];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  Documents_GetSimilarDocuments: {
    parameters: {
      path: {
        /** The document number to filter by */
        documentNumber: string;
        /** The general court number to filter by */
        generalCourtNumber: number;
      };
    };
    responses: {
      200: {
        schema: definitions["DocumentSummary"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  Documents_GetCities: {
    parameters: {
      path: {
        generalCourtNumber: number;
      };
    };
    responses: {
      200: {
        schema: string[];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  GeneralCourts_GetGeneralCourt: {
    responses: {
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  GeneralCourts_GetGeneralCourt2: {
    parameters: {
      path: {
        /** Number of the General Court to be returned. */
        generalCourtNumber: number;
      };
    };
    responses: {
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  GeneralCourts_GetGeneralCourtsForCommittees: {
    responses: {
      200: {
        schema: definitions["GeneralCourt"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  GeneralCourts_GetGeneralCourtsForDocuments: {
    responses: {
      200: {
        schema: definitions["GeneralCourt"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  GeneralCourts_GetGeneralCourtsForLegislativeMembers: {
    responses: {
      200: {
        schema: definitions["GeneralCourt"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  GeneralCourts_GetGeneralCourtsForSessions: {
    responses: {
      200: {
        schema: definitions["GeneralCourt"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  GeneralLawChapters_GetChapters: {
    responses: {
      200: {
        schema: definitions["GeneralLawChapterSummary"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  GeneralLawChapters_GetChaptersByCode: {
    parameters: {
      path: {
        /** The chapter code to filter by */
        code: string;
      };
    };
    responses: {
      200: {
        schema: definitions["GeneralLawChapter"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  GeneralLawChapters_GetChaptersByPart: {
    parameters: {
      path: {
        /** The Part code to filter by */
        partCode: string;
      };
    };
    responses: {
      200: {
        schema: definitions["GeneralLawChapterSummary"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  GeneralLawParts_GetGeneralLawsParts: {
    responses: {
      200: {
        schema: definitions["GeneralLawPartSummary"];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  GeneralLawParts_GetGeneralLawsParts2: {
    parameters: {
      path: {
        /** The Part code to filter by */
        code: string;
      };
    };
    responses: {
      200: {
        schema: definitions["GeneralLawPart"];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  GeneralLawSections_GetGeneralLawsSectionsAll: {
    parameters: {
      path: {
        /** The chapter to filter by */
        chapter: string;
      };
    };
    responses: {
      200: {
        schema: definitions["GeneralLawSectionSummary"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  GeneralLawSections_GetGeneralLawsSections: {
    parameters: {
      path: {
        /** The chapter code to filter by */
        chapter: string;
        /** The section code to filter by */
        section: string;
      };
    };
    responses: {
      200: {
        schema: definitions["GeneralLawSection"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  Hearings_GetHearingsAll: {
    responses: {
      200: {
        schema: definitions["HearingSummary"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  Hearings_GetHearings: {
    parameters: {
      path: {
        /** The Hearing ID to filter by. */
        eventId: number;
      };
    };
    responses: {
      200: {
        schema: definitions["Hearing"];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  HouseJournals_GetHouseJournals: {
    parameters: {
      path: {
        /** The General Court to filter by */
        generalCourtNumber: number;
      };
    };
    responses: {
      200: {
        schema: definitions["JournalSummary"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  HouseJournals_GetHouseJournalsAll: {
    responses: {
      200: {
        schema: definitions["JournalSummary"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  HouseJournals_GetHouseJournals2: {
    parameters: {
      path: {
        /** The Session Date to filter by */
        sessionDate: string;
        /** Whether it was a Joint Session */
        isJoint: boolean;
      };
    };
    responses: {
      200: {
        schema: definitions["HouseJournal"];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  Leadership_GetLeadershipAll: {
    parameters: {
      path: {
        branch: string;
      };
    };
    responses: {
      200: {
        schema: definitions["Leadership"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  Leadership_GetLeadership: {
    parameters: {
      path: {
        generalCourtNumber: number;
        branch: string;
      };
    };
    responses: {
      200: {
        schema: definitions["Leadership"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  LegislativeMembers_GetLegislativeMembers: {
    parameters: {
      path: {
        /** The General Court to filter by. */
        generalCourtNumber: number;
      };
    };
    responses: {
      200: {
        schema: definitions["LegislativeMemberSummary"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  LegislativeMembers_GetLegislativeMembers3: {
    parameters: {
      path: {
        /** The General Court to filter by. */
        generalCourtNumber: number;
        /** The member code to filter by. */
        memberCode: string;
      };
    };
    responses: {
      200: {
        schema: definitions["LegislativeMember"];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  LegislativeMembers_GetLegislativeMembersAll: {
    responses: {
      200: {
        schema: definitions["LegislativeMemberSummary"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  LegislativeMembers_GetLegislativeMembers2: {
    parameters: {
      path: {
        /** The member code to filter by. */
        memberCode: string;
      };
    };
    responses: {
      200: {
        schema: definitions["LegislativeMember"];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  Reports_GetReports: {
    parameters: {
      path: {
        branch: string;
      };
    };
    responses: {
      200: {
        schema: definitions["Report"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  Reports_GetReportsAll: {
    responses: {
      200: {
        schema: definitions["Report"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  RollCalls_GetRollCallAll: {
    parameters: {
      path: {
        documentNumber: string;
      };
    };
    responses: {
      200: {
        schema: definitions["RollCallSummary"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  RollCalls_GetRollCall2: {
    parameters: {
      path: {
        generalCourtNumber: number;
        branch: string;
        rollCallNumber: number;
      };
    };
    responses: {
      200: {
        schema: definitions["RollCall"];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  RollCalls_GetRollCall: {
    parameters: {
      path: {
        generalCourtNumber: number;
        documentNumber: string;
      };
    };
    responses: {
      200: {
        schema: definitions["RollCallSummary"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  SenateJournals_GetSenateJournals: {
    parameters: {
      path: {
        /** The General Court to filter by */
        generalCourtNumber: number;
      };
    };
    responses: {
      200: {
        schema: definitions["JournalSummary"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  SenateJournals_GetSenateJournalsAll: {
    responses: {
      200: {
        schema: definitions["JournalSummary"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  SenateJournals_GetSenateJournals2: {
    parameters: {
      path: {
        /** The session date of the journal */
        sessionDate: string;
        /** Whether it was a Joint Session */
        isJoint: boolean;
      };
    };
    responses: {
      200: {
        schema: definitions["SenateJournal"];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  SessionLaws_GetSessionLaws: {
    responses: {
      200: {
        schema: definitions["SessionLaw"];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  SessionLaws_GetSessionLaws2: {
    parameters: {
      path: {
        /** The year of the session to filter by. */
        year: number;
      };
    };
    responses: {
      200: {
        schema: definitions["SessionLaw"];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  SessionLaws_GetSessionLaws3: {
    parameters: {
      path: {
        /** The year of the Session to filter by. */
        year: number;
        /** The chapter number of the Session Law */
        chapterNumber: number;
      };
    };
    responses: {
      200: {
        schema: definitions["SessionLaw"];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  SessionLaws_GetSessionLawsYears: {
    responses: {
      200: {
        schema: number[];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  Sessions_GetSessionsByGeneralCourt: {
    parameters: {
      path: {
        /** The General Court to filter by. */
        generalCourtNumber: number;
      };
    };
    responses: {
      200: {
        schema: definitions["Session"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  Sessions_GetSessionsAll: {
    responses: {
      200: {
        schema: definitions["Session"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  Sessions_GetSessions: {
    parameters: {
      path: {
        /** The Session ID to filter by. */
        eventId: number;
      };
    };
    responses: {
      200: {
        schema: definitions["Session"];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  SpecialEvents_GetSpecialEventsAll: {
    responses: {
      200: {
        schema: definitions["SpecialEvent"][];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
  SpecialEvents_GetSpecialEvents: {
    parameters: {
      path: {
        /** The Special Event ID to filter by. */
        eventId: number;
      };
    };
    responses: {
      200: {
        schema: definitions["SpecialEvent"];
      };
      400: {
        schema: definitions["HttpResponseException"];
      };
    };
  };
}

export interface external {}
